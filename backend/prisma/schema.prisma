generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String             @id @default(cuid())
  email                     String             @unique
  password                  String
  firstName                 String
  lastName                  String
  phone                     String?
  country                   String?
  username                  String?            @unique
  displayName               String?
  isSearchable              Boolean            @default(true)
  kycStatus                 KYCStatus          @default(PENDING)
  kycSubmittedAt            DateTime?
  kycApprovedAt             DateTime?
  isActive                  Boolean            @default(true)
  emailVerified             Boolean            @default(false)
  phoneVerified             Boolean            @default(false)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  bankAccounts              BankAccount[]
  beneficiaries             Beneficiary[]
  cardTransactions          CardTransaction[]
  receivedInternalTransfers InternalTransfer[] @relation("Recipient")
  sentInternalTransfers     InternalTransfer[] @relation("Sender")
  issuedCards               IssuedCard[]
  sessions                  Session[]
  transactions              Transaction[]

  @@index([firstName])
  @@index([lastName])
  @@index([displayName])
  @@index([isSearchable, isActive])
  @@index([firstName, lastName])
  @@index([phone])
  @@index([username])
  @@index([createdAt])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Transaction {
  id                String            @id @default(cuid())
  userId            String
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  amount            Decimal           @db.Decimal(10, 2)
  currency          String            @db.VarChar(3)
  exchangeRate      Decimal?          @db.Decimal(10, 6)
  targetAmount      Decimal?          @db.Decimal(10, 2)
  targetCurrency    String?           @db.VarChar(3)
  platformFee       Decimal?          @db.Decimal(10, 2)
  providerFee       Decimal?          @db.Decimal(10, 2)
  totalFee          Decimal?          @db.Decimal(10, 2)
  referenceNumber   String?           @unique
  providerReference String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  completedAt       DateTime?
  beneficiaryId     String?
  description       String?
  metadata          String?
  beneficiary       Beneficiary?      @relation(fields: [beneficiaryId], references: [id])
  user              User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Beneficiary {
  id            String        @id @default(cuid())
  userId        String
  firstName     String
  lastName      String
  email         String?
  phone         String?
  bankName      String
  bankCode      String?
  accountNumber String
  accountType   String?
  address       String?
  city          String?
  state         String?
  country       String
  postalCode    String?
  isActive      Boolean       @default(true)
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@map("beneficiaries")
}

model InternalTransfer {
  id          String                 @id @default(cuid())
  senderId    String
  recipientId String
  amount      Decimal                @db.Decimal(10, 2)
  currency    String                 @db.VarChar(3)
  platformFee Decimal?               @db.Decimal(10, 2)
  note        String?
  reference   String                 @unique @default(cuid())
  status      InternalTransferStatus @default(PENDING)
  createdAt   DateTime               @default(now())
  completedAt DateTime?
  recipient   User                   @relation("Recipient", fields: [recipientId], references: [id])
  sender      User                   @relation("Sender", fields: [senderId], references: [id])

  @@map("internal_transfers")
}

model BankAccount {
  id               String            @id @default(cuid())
  userId           String
  bankAccountId    Int               @unique
  bankProfileId    Int
  currency         String            @db.VarChar(3)
  country          String            @db.VarChar(2)
  accountType      String
  name             String
  status           String            @default("ACTIVE")
  obpBankId        String?
  obpAccountId     String?
  iban             String?
  accountNumber    String?
  sortCode         String?
  routingNumber    String?
  bic              String?
  bankName         String?
  bankAddress      String?
  accessToken      String?
  refreshToken     String?
  tokenExpiresAt   DateTime?
  lastBalance      Decimal?          @db.Decimal(10, 2)
  balanceUpdatedAt DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     BankTransaction[]

  @@map("bank_accounts")
}

model IssuedCard {
  id                 String            @id @default(cuid())
  userId             String
  stripeCardId       String            @unique
  stripeCardholderId String
  currency           String            @db.VarChar(3)
  cardType           String
  status             String            @default("ACTIVE")
  spendingLimit      Decimal           @db.Decimal(10, 2)
  isTestCard         Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  design             String            @default("classic")
  transactions       CardTransaction[]
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("issued_cards")
}

model CardTransaction {
  id                    String     @id @default(cuid())
  cardId                String
  userId                String
  stripeAuthorizationId String?
  stripeTransactionId   String?
  amount                Decimal    @db.Decimal(10, 2)
  currency              String     @db.VarChar(3)
  merchantName          String?
  merchantCategory      String?
  status                String
  createdAt             DateTime   @default(now())
  card                  IssuedCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user                  User       @relation(fields: [userId], references: [id])

  @@map("card_transactions")
}

model BankTransaction {
  id                     String      @id @default(cuid())
  bankAccountId          String
  bankTransactionId      Int?
  type                   String
  status                 String      @default("PENDING")
  amount                 Decimal     @db.Decimal(10, 2)
  currency               String      @db.VarChar(3)
  exchangeRate           Decimal?    @db.Decimal(10, 6)
  targetAmount           Decimal?    @db.Decimal(10, 2)
  targetCurrency         String?     @db.VarChar(3)
  fee                    Decimal?    @db.Decimal(10, 2)
  reference              String?
  description            String?
  recipientName          String?
  recipientEmail         String?
  recipientIban          String?
  recipientAccountNumber String?
  recipientBankName      String?
  recipientCountry       String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  completedAt            DateTime?
  bankAccount            BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)

  @@map("bank_transactions")
}

enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  EXPIRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  EXCHANGE
  ACCOUNT_CREATION
  INBOUND_TRANSFER
  OUTBOUND_TRANSFER
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum InternalTransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BankAccountStatus {
  ACTIVE
  PENDING
  SUSPENDED
  CLOSED
}

enum BankTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  FEE
  EXCHANGE
}

enum BankTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

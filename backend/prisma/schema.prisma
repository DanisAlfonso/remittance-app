// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  country   String?
  
  // User discovery fields
  username      String? @unique  // @username handle for easy discovery
  displayName   String?          // Optional display name (defaults to firstName lastName)
  isSearchable  Boolean @default(true)  // Privacy control for user discovery
  
  // KYC fields
  kycStatus      KYCStatus @default(PENDING)
  kycSubmittedAt DateTime?
  kycApprovedAt  DateTime?
  
  // Account status
  isActive       Boolean @default(true)
  emailVerified  Boolean @default(false)
  phoneVerified  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions    Session[]
  transactions Transaction[]
  beneficiaries Beneficiary[]
  bankAccounts BankAccount[]
  sentInternalTransfers     InternalTransfer[] @relation("Sender")
  receivedInternalTransfers InternalTransfer[] @relation("Recipient")
  issuedCards IssuedCard[]
  cardTransactions CardTransaction[]
  
  
  // Performance indexes for user search
  @@index([firstName])
  @@index([lastName]) 
  @@index([displayName])
  @@index([isSearchable, isActive])
  @@index([firstName, lastName])
  @@index([phone]) // For phone search performance
  @@index([username]) // Already unique but good for search perf
  @@index([createdAt]) // For member since sorting
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  amount      Decimal           @db.Decimal(10, 2)
  currency    String            @db.VarChar(3)
  
  // Exchange rate info
  exchangeRate       Decimal? @db.Decimal(10, 6)
  targetAmount       Decimal? @db.Decimal(10, 2)
  targetCurrency     String?  @db.VarChar(3)
  
  // Fees
  platformFee        Decimal? @db.Decimal(10, 2)
  providerFee        Decimal? @db.Decimal(10, 2)
  totalFee           Decimal? @db.Decimal(10, 2)
  
  // Reference numbers and metadata
  referenceNumber    String?  @unique
  providerReference  String?
  description        String?
  metadata           String?  @db.Text
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  beneficiary Beneficiary? @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String?
  
  @@map("transactions")
}

model Beneficiary {
  id          String @id @default(cuid())
  userId      String
  
  // Personal info
  firstName   String
  lastName    String
  email       String?
  phone       String?
  
  // Bank details
  bankName    String
  bankCode    String?
  accountNumber String
  accountType   String?
  
  // Address
  address     String?
  city        String?
  state       String?
  country     String
  postalCode  String?
  
  // Status
  isActive    Boolean @default(true)
  isVerified  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  transactions Transaction[]
  
  @@map("beneficiaries")
}

enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  EXPIRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  EXCHANGE
  ACCOUNT_CREATION
  INBOUND_TRANSFER
  OUTBOUND_TRANSFER
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}


model InternalTransfer {
  id            String @id @default(cuid())
  senderId      String
  recipientId   String
  amount        Decimal @db.Decimal(10, 2)
  currency      String @db.VarChar(3)
  
  // Fee structure
  platformFee   Decimal? @db.Decimal(10, 2)
  
  // Transfer details
  note          String?
  reference     String @unique @default(cuid())
  status        InternalTransferStatus @default(PENDING)
  
  // Timestamps
  createdAt     DateTime @default(now())
  completedAt   DateTime?
  
  // Relations
  sender        User @relation("Sender", fields: [senderId], references: [id])
  recipient     User @relation("Recipient", fields: [recipientId], references: [id])
  
  @@map("internal_transfers")
}

enum InternalTransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// ===========================================
// BANKING MODELS - PROPER TERMINOLOGY
// ===========================================

model BankAccount {
  id            String   @id @default(cuid())
  userId        String
  
  // Bank account details
  bankAccountId Int      @unique
  bankProfileId Int
  currency      String   @db.VarChar(3)
  country       String   @db.VarChar(2)
  accountType   String   // SAVINGS, CHECKING
  name          String
  status        String   @default("ACTIVE")
  
  // OBP-API integration fields  
  obpBankId     String?  // OBP bank ID (e.g., "TESTBANK1")
  obpAccountId  String?  // OBP account ID for real banking integration
  
  // Account identifiers
  iban          String?
  accountNumber String?
  sortCode      String?
  routingNumber String?
  bic           String?
  
  // Bank information
  bankName      String?
  bankAddress   String?
  
  // OAuth tokens (if needed for some providers)
  accessToken   String?
  refreshToken  String?
  tokenExpiresAt DateTime?
  
  // Balance cache
  lastBalance   Decimal? @db.Decimal(10, 2)
  balanceUpdatedAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions BankTransaction[]
  
  @@map("bank_accounts")
}

// Stripe Issuing Cards
model IssuedCard {
  id                  String   @id @default(cuid())
  userId              String
  stripeCardId        String   @unique
  stripeCardholderId  String
  currency            String   @db.VarChar(3)
  cardType            String   // VIRTUAL, PHYSICAL
  status              String   @default("ACTIVE") // ACTIVE, INACTIVE, CANCELLED
  spendingLimit       Decimal  @db.Decimal(10, 2)
  isTestCard          Boolean  @default(false)
  design              String   @default("classic") // classic, premium, midnight, ocean
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions CardTransaction[]
  
  @@map("issued_cards")
}

model CardTransaction {
  id                   String   @id @default(cuid())
  cardId               String
  userId               String
  stripeAuthorizationId String?
  stripeTransactionId  String?
  amount               Decimal  @db.Decimal(10, 2)
  currency             String   @db.VarChar(3)
  merchantName         String?
  merchantCategory     String?
  status               String   // PENDING, APPROVED, DECLINED, COMPLETED
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  card IssuedCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  
  @@map("card_transactions")
}

model BankTransaction {
  id              String   @id @default(cuid())
  bankAccountId   String
  
  // Transaction details
  bankTransactionId Int?
  type            String   // DEPOSIT, WITHDRAWAL, TRANSFER, FEE
  status          String   @default("PENDING")
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @db.VarChar(3)
  
  // Exchange details
  exchangeRate    Decimal? @db.Decimal(10, 6)
  targetAmount    Decimal? @db.Decimal(10, 2)
  targetCurrency  String?  @db.VarChar(3)
  
  // Fees
  fee             Decimal? @db.Decimal(10, 2)
  
  // Reference
  reference       String?
  description     String?
  
  // Recipient details (for Recent Recipients feature)
  recipientName   String?
  recipientEmail  String?
  recipientIban   String?
  recipientAccountNumber String?
  recipientBankName String?
  recipientCountry String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?
  
  // Relations
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  
  @@map("bank_transactions")
}

// New Banking Enums with proper terminology
enum BankAccountStatus {
  ACTIVE
  PENDING
  SUSPENDED
  CLOSED
}

enum BankTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  FEE
  EXCHANGE
}

enum BankTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}


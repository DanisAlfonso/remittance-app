// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  country   String?
  
  // KYC fields
  kycStatus      KYCStatus @default(PENDING)
  kycSubmittedAt DateTime?
  kycApprovedAt  DateTime?
  
  // Account status
  isActive       Boolean @default(true)
  emailVerified  Boolean @default(false)
  phoneVerified  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions    Session[]
  transactions Transaction[]
  beneficiaries Beneficiary[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  amount      Decimal           @db.Decimal(10, 2)
  currency    String            @db.VarChar(3)
  
  // Exchange rate info
  exchangeRate       Decimal? @db.Decimal(10, 6)
  targetAmount       Decimal? @db.Decimal(10, 2)
  targetCurrency     String?  @db.VarChar(3)
  
  // Fees
  platformFee        Decimal? @db.Decimal(10, 2)
  providerFee        Decimal? @db.Decimal(10, 2)
  totalFee           Decimal? @db.Decimal(10, 2)
  
  // Reference numbers
  referenceNumber    String?  @unique
  providerReference  String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  beneficiary Beneficiary? @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String?
  
  @@map("transactions")
}

model Beneficiary {
  id          String @id @default(cuid())
  userId      String
  
  // Personal info
  firstName   String
  lastName    String
  email       String?
  phone       String?
  
  // Bank details
  bankName    String
  bankCode    String?
  accountNumber String
  accountType   String?
  
  // Address
  address     String?
  city        String?
  state       String?
  country     String
  postalCode  String?
  
  // Status
  isActive    Boolean @default(true)
  isVerified  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  transactions Transaction[]
  
  @@map("beneficiaries")
}

enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  EXPIRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  EXCHANGE
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
